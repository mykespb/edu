#!/usr/bin/env python
# Mikhail Kolodin, 2023
# 2023-02-08 2023-02-08 1.1
# ya-anagram.py

# ~ Задача из яндекса - Анаграммы

# ~ Решение

def is_anagram1(s1, s2):

    print(f"{s1=}, {s2=}, {sorted(s1) == sorted(s2)}")

from collections import Counter

def is_anagram2(s1, s2):

    print(f"{s1=}, {s2=}, {len(s1) == len(s2) and Counter(s1) == Counter(s2)}")

# ~ Тесты

is_anagram = is_anagram1
# ~ is_anagram = is_anagram2

is_anagram('hello', 'elloh')
is_anagram('assia', 'asia')
is_anagram('assia', '')
is_anagram('', '')
is_anagram('1234567890', '0987654321')


# ~ Задача E. Анаграммы
# ~ Эта достаточно простая задача — типичный пример задачи, для решения которой необходимо использовать ассоциативные массивы. При решении нужно учитывать, что символы могут повторяться, поэтому необходимо использовать не множества, а словари. Поэтому решение будет следующим: составим из каждой строки по словарю, который для каждого символа будет хранить количество его повторений; затем сравним получившиеся словари. Если они совпадают, необходимо вывести единицу, в противном случае — ноль.
# ~ Альтернативное решение: отсортируем входные строки, а затем сравним их. Это решение хуже в том, что оно работает медленнее, а также меняет входные данные. Зато такое решение не использует дополнительной памяти.
# ~ Если в процессе собеседования у вас возникло несколько вариантов решения, отличающихся своими по своим характеристикам, расскажите об этом. Всегда здорово, когда разработчик знает несколько вариантов решения задачи и может рассказать об их сильных и слабых сторонах.

# ~ 1 способ
# ~ s1='hello', s2='elloh', True
# ~ s1='assia', s2='asia', False
# ~ s1='assia', s2='', False
# ~ s1='', s2='', True
# ~ s1='1234567890', s2='0987654321', True

# ~ 2 способ
# ~ s1='hello', s2='elloh', True
# ~ s1='assia', s2='asia', False
# ~ s1='assia', s2='', False
# ~ s1='', s2='', True
# ~ s1='1234567890', s2='0987654321', True


#!/usr/bin/env python
# coding: utf-8

# # Примеры и упражнения по Python3 - простой уровень - часть 1

# Автор-составитель - Михаил Колодин

# Версия 2021-04-17 от 2021-05-25 - 1.8

# Разделы:
# * [Параметры системы](#params)
# * [Калькулятор](#calc)
# * [Условия](#conditions)
# * [Циклы](#loops)
# * [Строки](#strings)
# * [Дата и время](#datetime)
# * [Спецфункции и значения](#specfunc)
# * [Отладка](#debug)

# **Параметры системы** <a name=params></a>
# 
# Далее весь код будет исполняемым
# ```python
# import sys
# print("Python version:", sys.version)
# ```

# In[8]:


import sys
print("Python version:", sys.version)

from platform import python_version
print(python_version())


# ---
# **Калькулятор** <a name=calc></a>

# ---
# ***Площади и население стран***

# In[1]:


ru_ter = 17125191
ba_ter = 144000
ru_nas = 146238185
ba_nas = 172287439


# In[2]:


# плотность населения
ru_plo = ru_nas / ru_ter
ba_plo = ba_nas / ba_ter
otn_plo = ba_plo / ru_plo


# In[3]:


print("плотность населения России", ru_plo, "чел. / кв.км,")
print("плотность населения Бангладеша", ba_plo, "чел. / кв.км,")
print("отношение плотностей населения Бангладеша к России", otn_plo, 
      ",\nто есть в Бангладеше живёт примерно в", round(otn_plo), "раз больше людей, чем в России.")


# ---
# ***Золотое сечение*** $\Phi$

# $$\Phi = \frac{\sqrt5 + 1}2 \approx 1.61803, \phi = \frac1\Phi = \frac{\sqrt5 - 1}2 \approx 0.61803$$

# | обозначение | формула | значение |
# |:-------------:|:-------:|:--------- |
# | $\Phi$ | $\frac{\sqrt5 + 1}2$ | $\approx 1.61803$ |
# | $\phi$ | $\frac{\sqrt5 - 1}2$ | $\approx 0.61803$ |
# 

# См. [Wikipedia](https://ru.wikipedia.org/w/index.php?title=%D0%97%D0%BE%D0%BB%D0%BE%D1%82%D0%BE%D0%B5_%D1%81%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5&oldid=113372180)

# In[4]:


import math
fi_major = (math.sqrt(5) + 1) / 2
fi_minor = (math.sqrt(5) - 1) / 2


# In[5]:


print(fi_minor)
print(fi_major)


# ---
# **Условия** <a name=conditions></a>

# ---
# ***Максимум из 2 чисел***

# In[109]:


a = 2; b = 3


# In[144]:


# простое сравнение на равенство (не вся задача решена)
if a == b:
    print("a == b")

# вложенные условные операторы
if a == b:
    print("a == b")
else:
    if a < b:
        print("a < b")
    else:
        print("a > b")
    
# составной условный оператор
if a == b:
    print("a == b")
elif a < b:
    print("a < b")
else:
    print("a > b")


# In[145]:


# составное условное выражение
print("a == b" if a == b else "a < b" if a < b else "a > b")


# ---
# ***Минимум из 3 чисел***

# In[9]:


# выбираем нужный набор данных этот...
a, b, c = 3, 4, 5
a, b, c


# In[30]:


#...или этот
a, b, c = 33, 22, 11


# In[10]:


# а теперь посчитаем... наивный подход:
if a < b and a < c:      # сравниваем со всеми остальными
    print(a)
elif b < c and b < a:    # сравниваем со всеми остальными
    print(b)
elif c < a and c < b:    # сравниваем со всеми остальными
    print(c)


# In[11]:


# а теперь посчитаем правильно:
if a < b and a < c:      # сравниваем со всеми остальными
    print(a)
elif b < c:              # сравнивать с а уже не нужно, оно не самое маленькое, пропускаем
    print(b)
else:                    # осталось ваше с...
    print(c)


# ---
# **Циклы** <a name=loops></a>

# ---
# ***Сумма чисел***

# In[12]:


# не очень красиво
sum = 0                 # сумма изначально нулевая и постепенно накапливается
for i in range(1, 11):  # i будет от 1 до 10
    sum += i            # на каждом шаге итерации (повтора цикла) добавляется новое слагаемое
    print(i, sum)


# In[13]:


print(sum)


# In[9]:


# более красивое решение

N = 10                   # предел вычислений (удобно вынести на самый верх программы, до вычислений)
#N = 100                 # ...задача юного Гаусса
#N = 1000

summa = 0                  # сумма изначально нулевая и постепенно накапливается

for i in range(1, N+1):  # i будет от 1 до N
    summa += i             # на каждом шаге итерации (повтора цикла) добавляется новое слагаемое

print("сумма равна", summa)


# ---
# **Foo Bar Baz**
# 
# Вывести числа от 1 до 100, но с оговорками: 
# - если число делится (нацело) на 3, вместо него напечатать foo,
# - если число делится на 5, вместо него напечатать bar,
# - если число делится и на 3, и на 5, вместо него напечатать baz.

# In[1]:


for i in range(1, 101):
    if i % 15 == 0:
        print('baz', end=" ")
    elif i % 3 == 0:
        print('foo', end=" ")
    elif i % 5 == 0:
        print('bar', end=" ")
    else:
        print(i, end=" ")


# ---
# ***Фибоначчи не по-питоновски***

# In[5]:


UP = 20    # вычисляем и печатаем 20 первых чисел Фибоначчи, рекуррентные последовательности
f1 = 1
f2 = 1
print(f1, f2)


# In[6]:


for n in range(2, UP):
    f3 = f1 + f2
    print(f1, f2, f3)
    f1 = f2
    f2 = f3
    print(f1, f2, f3)


# ***Фибоначчи по-питоновски***

# In[101]:


UP = 20        # вычисляем и печатаем 20 первых чисел Фибоначчи
f1 = f2 = 1
print(f1, f2)


# In[33]:


for _ in range(2, UP):
    f1, f2 = f2, f1+f2
    print(f2, end=" ")


# ---
# ***Факториал $n! = 1 \cdot 2 \cdot 3 \cdot \ldots \cdot n$***
# 
# Напр., $5! = 1 \cdot 2 \cdot 3 \cdot 4 \cdot 5$.
# Кроме того, принято, что $0! = 1$.
# 
# Вычислить и напечатать факториалы чисел от 1 до 30.

# In[10]:


UP = 30
f = 1


# In[11]:


for i in range(1, UP+1):
    f *= i             #  то же, что f = f * i
    print("%10i!  =" % i, "%40i" % f)


# ---
# **Строки** <a name=strings></a>

# ---
# ***Простые операции со строками***

# In[1]:


s = "привет"
s


# In[2]:


s[0], s[1], s[-1], s[-2], s[1:2], s[0:2], s[3:], s[:4], s[:]


# ***Действия над строками***

# In[4]:


s1 = "hello"; s2 = "world"
s1, s2


# In[9]:


s3 = s1 + s2
print(s3)
s4 = s1 + " " + s2
print(s4)
s5 = s1 + ", " + s2
print(s5)


# ***Строковые функции***

# In[26]:


s = "это питон"
print(s)

print(len(s))
print("длина строки '", s, "' равна", len(s))

print("длина строки '%s' равна %d" % (s, len(s)))
print("длина строки '{}' равна {}".format(s, len(s)))
print("длина строки '{0}' равна {1}".format(s, len(s)))


# ---
# ***Разбор 3-значного числа на разряды***
# 123 = 100 + 20 + 3

# In[38]:


n = 123


# In[39]:


s = str(n//100) + '00 + ' + str(n%100//10) + '0 + ' + str(n%10)


# In[40]:


print(s)


# In[41]:


s


# ---
# ***Перевод из строки в натуральное чсило***

# In[35]:


s = "123"


# In[39]:


# схема Горнера
n = 0
for d in s:
    n = n*10 + ord(d) - ord('0')
print("строка:", s, ", число:", n)


# In[40]:


#  а можно и по-питоновски:
n = int(s)
print("строка:", s, ", число:", n)


# ***Сумма цифр числа***
# 
# Дано натуральное число (или 0). Найти сумму его цифр.

# In[5]:


def sumdig(n):
    """сумма цифр числа"""
    s = 0
    while n:
        s += n % 10
        n //= 10
    return s

def orgme(n):
    """органайзер для печати чисел и сумм их цифр"""
    print("число:", n, ", сумма цифр:", sumdig(n))

orgme(0) 
orgme(5)
orgme(123)
orgme(123456789)


# ---
# **Дата и время** <a name=datetime></a>

# ---
# ***Сегодня и текущее время***

# In[2]:


import datetime

now = datetime.datetime.now()

print(now)
print ("Current date and time : ", now.strftime("%Y-%m-%d %H:%M:%S"))
print ("Текущие дата и время : ", now.strftime("%d.%m.%Y %H:%M:%S"))
print("Нынче год такой:", now.year)


# ---
# **Специальные функции и значения** <a name=specfunc></a>

# ---
# ***Случайные числа***

# In[3]:


# случайные целые числа
import random

for _ in range(100):
    print(random.randint(0, 1000), end=", ")
print()
for _ in range(100):
    print(random.randint(-1000, 1000), end=", ")


# In[4]:


# пакет случайных чисел

print(*[random.randint(1, 100) for i in range(100)], sep=", ", end=". the end")


# In[5]:


# случайные целые числа

for i in range(1, 101):
    print("%5d" % (random.randint(-1000, +1000),), end="\n" if i%10==0 else "\t")


# In[6]:


# случайные вещественные числа

for i in range(1, 101):
    print(random.random(), end="\n" if i%4==0 else "\t")


# ---
# ***Уникальные идентификаторы***

# In[7]:


import uuid

for i in range(20):
    uu = uuid.uuid4()
    print("%5i\t%s\t%s" % (i, uu, uu.hex))


# ---
# ***Секретные строки***

# In[8]:


import secrets

for i in range(20):
    print(secrets.token_hex(), secrets.token_urlsafe())


# ---
# **PEP(8)**  <a name=pep8></a>
# 
# Это соглашение о том, как писать код для языка python, включая стандартную библиотеку, входящую в состав python

# * [Руководство](https://pythonworld.ru/osnovy/pep-8-rukovodstvo-po-napisaniyu-koda-na-python.html)
# * [Все PEPы](https://pythonz.net/peps/)

# ---
# ***Дзен питона - Zen of Python - PEP(20)***
# 
# Разработчики языка Python придерживаются определённой философии программирования, называемой «The Zen of Python» («Дзен Питона», или «Дзен Пайтона»). Её текст выдаётся интерпретатором Python по команде import this (работает один раз за сессию).
# В целом она подходит к программированию на любом языке.
# 
# **Текст философии**
# * Красивое лучше, чем уродливое.
# * Явное лучше, чем неявное.
# * Простое лучше, чем сложное.
# * Сложное лучше, чем запутанное.
# * Плоское лучше, чем вложенное.
# * Разреженное лучше, чем плотное.
# * Читаемость имеет значение.
# * Особые случаи не настолько особые, чтобы нарушать правила.
# * При этом практичность важнее безупречности.
# * Ошибки никогда не должны замалчиваться.
# * Если они не замалчиваются явно.
# * Встретив двусмысленность, отбрось искушение угадать.
# * Должен существовать один и, желательно, только один очевидный способ сделать это.
# * Хотя он поначалу может быть и не очевиден, если вы не голландец [^1].
# * Сейчас лучше, чем никогда.
# * Хотя никогда зачастую лучше, чем прямо сейчас.
# * Если реализацию сложно объяснить — идея плоха.
# * Если реализацию легко объяснить — идея, возможно, хороша.
# * Пространства имён — отличная штука! Будем делать их больше!
# 

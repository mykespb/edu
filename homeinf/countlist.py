#!/usr/bin/env python
# coding: utf-8

# &#127279; Mikhail Kolodin, 2024
# 
# countlist.ipynb 2024-12-08 2024-12-09 1.1
# 
# Простая задача, много разных решений.
# 
# __Есть список целых чисел.__
# 
# __Посчитать, сколько в нём каких чисел.__
# 
# Можно: 
# а) показать ответ в упорядоченном виде;
# б) вернуть структуру с результатом.
# 
#     Пример:
#     дано:
#     lst = [1, 1, 0, 3, 5, 1, 1, 3, 9]
#     
#     ответ:
#     число   сколько
#     0           1
#     1           4 
#     3           1
#     5           1
#     9           1
#     
#     или иначе, но понятно, типа
#     [(0, 1), (1, 4), (3, 1), (5, 1), (9, 1)]
# 

# In[143]:


lst = [1, 1, 0, 3, 5, 1, 1, 3, 9]
lst


# __№1. Решение при известных ограничениях.__
# 
# Пусть известно, что все числа находятся в диапазоне [0; 9].
# 
# Тогда можно использовать список для подсчёта.

# In[145]:


# подсчёт:
cnt = [0 for _ in range(10)]
for e in lst:
	cnt[e] += 1

# красивая печать:
print(f"{cnt=}\n")
print("%10s - %10s" % ("число", "сколько"))
for i in range(len(cnt)):
    if cnt[i]:
        print("%10d - %10d" % (i, cnt[i]))


# __№2. Решение на списках.__
# 
# Если никаких ограниченйи нет, то полностью считаем все числа.
# 
# Заводим список списков (пар типа число: значение) и считаем по этим парам.

# In[147]:


# подсчёт:
cnt = []
for e in lst:
    for i in range(len(cnt)):
        if cnt[i][0] == e:
            cnt[i][1] += 1
            break
    else:
        cnt.append([e, 1])

# красивая печать:
print(f"{cnt=}\n")
print("%10s - %10s" % ("число", "сколько"))
cnt.sort()
for i in range(len(cnt)):
    print("%10d - %10d" % (cnt[i][0], cnt[i][1]))


# __№3. Словари.__
# 
# Мы ведём подсчёт попарно -- число:сколько.
# 
# Это очень напоминает словари.

# In[149]:


# подсчёт:
cnt = {}
for e in lst:
    if e in cnt:
        cnt[e] += 1
    else:
        cnt[e] = 1

# красивая печать:
print(f"{cnt=}\n")
print("%10s - %10s" % ("число", "сколько"))
for k in sorted(cnt.keys()):
    print("%10d - %10d" % (k, cnt[k]))


# __№4. Класс defaultdict.__
# 
# Но есть сложность: каждый раз надо проверять, есть ли уже проверяемый элемент в словаре. 
# 
# Как бы сделать так, чтобы там по умолчанию были нули. Есть такое.

# In[151]:


from collections import defaultdict


# In[152]:


# подсчёт:
cnt = defaultdict(int)
for e in lst:
    cnt[e] += 1

# красивая печать:
print(f"{cnt=}\n")
print("%10s - %10s" % ("число", "сколько"))
for k in sorted(cnt.keys()):
    print("%10d - %10d" % (k, cnt[k]))


# __№5. Решение на счётчиках.__
# 
# А просто посчитать можно? Мы ведь не первые, кто такой задачкой занялся; наверное, уже есть готовое решение ("батарейка")? -- Есть.

# In[154]:


from collections import Counter


# In[155]:


# подсчёт:
cnt = Counter(lst)

# красивая печать:
print(f"{cnt=}\n")
print("%10s - %10s" % ("число", "сколько"))
for k in sorted(cnt.keys()):
    print("%10d - %10d" % (k, cnt[k]))


# __Итого:__
# 
# - мы решили задачу разными способами,
# - мы узнали о пользе познания стандартных методов и библиотек программ: там наверняка есть подходящее решение.

# In[ ]:





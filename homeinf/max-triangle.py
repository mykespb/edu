#!/usr/bin/env python
# Mikhail (myke) Kolodin, 2024
# 2025-01-10 2025-01-12 1.0
# max-triangle.py

# ~ Даны координаты углов нескольких треугольников на площади.
# ~ Найти треугольнки с наибольшей площадью
# ~ (если несколько, то любой).

# ~ Решение:
# ~ 1. по кооринатам находим длины сторон, как гипотенузы по теореме Пифагора,
# ~ 2. затем периметр. полупериметр,
# ~ 3. и по формуле Герона находим площадь,
# ~ 4. затем выбираем наибольшую.

# ~ Д.б. несколько заранее заданных треугольников для проверки решения
# ~ и генератор треугольников,
# ~ с разбросом до random(+/-) * SCALE=10 для координат.

LIMIT = 3    # сколько всего треугольников делать

# предзаданные треугольники

tripreset = [[0., 0., 0., 1., 1., 0.],
            [0., 0., 0., 2., 2., 0.],
            [0., 0., 0., 3., 3., 0.]]

from math import sqrt
from pprint import pp
from random import random as rr

SCALE = 10.

# ----------------------------------------------
# make random triangles

def rc():
    """
    дать случайную координату
    """

    return rr()*2*SCALE - SCALE
    

def make_tri():
    """
    сделать треугольники
    """

    trirandom = []
    
    for i in range(LIMIT):
        trirandom.append( [rc(), rc(), rc(), rc(), rc(), rc() ])

    return trirandom
    

# ----------------------------------------------
# comparing functions

# ----------------------------------------------
# prepare tests

def run_tests(tri):
    """
    выполнить тесты на наборе треугольников tri
    """

    print(f"\nТест на треугольниках:")
    for i, t in enumerate(tri, 1):
        print(f"треугольник номер {i}: ", end="")
        print(*t, sep=", ")

    for i in range(LIMIT):
        tri[i].append(calc_size(tri[i]))

    tri.sort(reverse=True, key = lambda x: x[-1])

    print(f"макс. треугольник имеет размер {tri[0][-1]} и координаты {tri[0][:-1]}")

    # ~ pp(tri)

def calc_size(tri):
    """
    вычислить размер одного треугольника
    """

    a = length(tri[0], tri[1], tri[2], tri[3])
    b = length(tri[4], tri[5], tri[2], tri[3])
    c = length(tri[4], tri[5], tri[0], tri[1])

    p = (a + b + c) / 2

    s = sqrt( p * (p-a) * (p-b) * (p-c) )

    return s


def length(x1, y1, x2, y2):
    """
    вычислить длину стороны
    """

    size = sqrt( (x1-x2) ** 2 + (y1-y2) ** 2 )

    return size
    

# ----------------------------------------------
# run all

def main():
    """
    запустить всё
    """

    run_tests(tripreset)
    run_tests(make_tri())

main()

# ----------------------------------------------
# results

# ~ Тест на треугольниках:
# ~ треугольник номер 1: 0.0, 0.0, 0.0, 1.0, 1.0, 0.0
# ~ треугольник номер 2: 0.0, 0.0, 0.0, 2.0, 2.0, 0.0
# ~ треугольник номер 3: 0.0, 0.0, 0.0, 3.0, 3.0, 0.0
# ~ макс. треугольник имеет размер 4.499999999999997 и координаты [0.0, 0.0, 0.0, 3.0, 3.0, 0.0]

# ~ Тест на треугольниках:
# ~ треугольник номер 1: 2.085032435377716, 4.922595381154611, 8.735335501768443, 9.820230027892002, 6.050272418618373, -2.152519502232355
# ~ треугольник номер 2: -4.368990385818455, -1.223171156632489, -8.130337328174868, 1.160764198494162, -6.3419607021517805, -2.6298583274611538
# ~ треугольник номер 3: -1.8751344337070854, 3.001512946170388, 7.202245334382269, 8.958906809663354, -7.962984797779904, 1.1566457824600747
# ~ макс. треугольник имеет размер 33.23597746430144 и координаты [2.085032435377716, 4.922595381154611, 8.735335501768443, 9.820230027892002, 6.050272418618373, -2.152519502232355]

# ----------------------------------------------

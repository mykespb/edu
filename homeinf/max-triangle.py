#!/usr/bin/env python
# Mikhail (myke) Kolodin, 2024
# 2025-01-10 2025-01-16 1.2
# max-triangle.py

# ~ Даны координаты углов нескольких треугольников на площади.
# ~ Найти треугольнки с наибольшей площадью
# ~ (если несколько, то любой).

# ~ Решение:
# ~ 1. по кооринатам находим длины сторон, как гипотенузы по теореме Пифагора,
# ~ 2. затем периметр, полупериметр,
# ~ 3. и по формуле Герона находим площадь,
# ~ 4. затем выбираем наибольшую.

# ~ Д.б. несколько заранее заданных треугольников для проверки решения
# ~ и генератор треугольников,
# ~ с разбросом до random(+/-) * SCALE=10 для координат.

LIMIT = 3    # сколько всего треугольников делать

# предзаданные треугольники

tripreset = [[0., 0., 0., 1., 1., 0.],
            [0., 0., 0., 2., 2., 0.],
            [0., 0., 0., 3., 3., 0.]]

from math import sqrt
from pprint import pp
from random import random as rr

SCALE = 10.

# ----------------------------------------------
# make random triangles

def rc():
    """
    дать случайную координату
    """

    return rr()*2*SCALE - SCALE
    

def make_tri():
    """
    сделать треугольники
    """

    trirandom = []
    
    for i in range(LIMIT):
        trirandom.append( [rc(), rc(), rc(), rc(), rc(), rc() ])

    return trirandom
    

# ----------------------------------------------
# prepare tests

def run_tests(tri):
    """
    выполнить тесты на наборе треугольников tri
    """

    print(f"\nТест на треугольниках:")
    for i, t in enumerate(tri, 1):
        print(f"треугольник номер {i}: ", end="")
        for el in t:
            print( "%.2f" % el , end=", " )
        print()
    for i in range(LIMIT):
        tri[i].append(calc_size(tri[i]))

    tri.sort(reverse=True, key = lambda x: x[-1])

    print(f"\nмакс. треугольник имеет размер {tri[0][-1]:.2f} и координаты ", end="")
    for el in tri[0][:-1]:
        print( "%.2f" % el , end=", " )
    print()

def calc_size(tri):
    """
    вычислить размер одного треугольника
    """

    a = length(tri[0], tri[1], tri[2], tri[3])
    b = length(tri[4], tri[5], tri[2], tri[3])
    c = length(tri[4], tri[5], tri[0], tri[1])

    p = (a + b + c) / 2

    s = sqrt( p * (p-a) * (p-b) * (p-c) )

    return s


def length(x1, y1, x2, y2):
    """
    вычислить длину стороны
    """

    size = sqrt( (x1-x2) ** 2 + (y1-y2) ** 2 )

    return size
    

# ----------------------------------------------
# run all

def main():
    """
    запустить всё
    """

    run_tests(tripreset)
    run_tests(make_tri())
    print()

main()

# ----------------------------------------------
# results

# ~ Тест на треугольниках:
# ~ треугольник номер 1: 0.00, 0.00, 0.00, 1.00, 1.00, 0.00, 
# ~ треугольник номер 2: 0.00, 0.00, 0.00, 2.00, 2.00, 0.00, 
# ~ треугольник номер 3: 0.00, 0.00, 0.00, 3.00, 3.00, 0.00, 

# ~ макс. треугольник имеет размер 4.50 и координаты 0.00, 0.00, 0.00, 3.00, 3.00, 0.00, 

# ~ Тест на треугольниках:
# ~ треугольник номер 1: -5.85, 0.36, -0.79, -1.91, 5.76, -2.30, 
# ~ треугольник номер 2: 1.92, -0.59, -6.82, 3.35, -2.51, -7.33, 
# ~ треугольник номер 3: -9.84, 5.57, 7.80, -0.65, 2.21, -2.82, 

# ~ макс. треугольник имеет размер 38.15 и координаты 1.92, -0.59, -6.82, 3.35, -2.51, -7.33, 

# ----------------------------------------------

#!/usr/bin/env python
# Mikhail (myke) Kolodin, 2024
# 2025-01-22 2025-01-31 1.1
# text-square.py

# ------------------------------------------
# задание

# ~ Дан текст.
# ~ Записать его построчно в квадрат наименьшего размера.

# ------------------------------------------
# примеры для тестирования

texts = """
Дан текст. Записать его построчно в квадрат наименьшего размера.
Бывший президент США отправился (https://www.rbc.ru/wine/news/6790a04b9a79473c8eb00504) в долину Санта-Инес, чтобы отпраздновать выход на пенсию. Эта долина известна своими винодельческими производствами.
В Лос-Анджелесе продолжаются пожары, с которыми не справляются — ни фактически, ни политически. Огненная стихия уничтожает все на своем пути — от домов обычных людей до роскошных вилл голливудских звезд. 
"""

# ------------------------------------------
# определение размера

from pprint import pp

# макс размер стороны квадрата
MAX_SIZE    = 100

# делать ли пробелы между буквами при выводе
WITH_SPACES = True
# ~ WITH_SPACES = False

def det_size(text):
    tl = len(text)

    if not tl:
        return 0

    for i in range(MAX_SIZE):
        if tl <= i*i:
            return i

    return 0

# ------------------------------------------
# вписывание текста

def place_text(text, size):

    sq = [ [ "" for j in range(size) ] for i in range(size) ]
    tl = len(text)

    for i in range(size):
        for j in range(size):
            pos = i*size + j
            if tl > pos:
                sq[i][j] = text[pos]
            else:
                sq[i][j] = ""

    return sq

# ------------------------------------------
# все тесты

def print_square(text, size):
    tl = len(text)

    pp(text)
    print()
    
    for i in range(size):
        for j in range(size):
            print(text[i][j], end=" " if WITH_SPACES else "")
        print()

    print()


def tests():

    for one in texts.strip().splitlines():
        size = det_size(one)
        print(f"\nтекст: {one}\nдлина: {len(one)}\nразмер: {size}\n\nквадрат:\n")
        if size:
            print_square(place_text(one, size), size)
        else:
            print("невозможен")


tests()

# ------------------------------------------
# результаты

# ------------------------------------------

# ~ текст: Дан текст. Записать его построчно в квадрат наименьшего размера.
# ~ длина: 64
# ~ размер: 8

# ~ квадрат:

# ~ [['Д', 'а', 'н', ' ', 'т', 'е', 'к', 'с'],
 # ~ ['т', '.', ' ', 'З', 'а', 'п', 'и', 'с'],
 # ~ ['а', 'т', 'ь', ' ', 'е', 'г', 'о', ' '],
 # ~ ['п', 'о', 'с', 'т', 'р', 'о', 'ч', 'н'],
 # ~ ['о', ' ', 'в', ' ', 'к', 'в', 'а', 'д'],
 # ~ ['р', 'а', 'т', ' ', 'н', 'а', 'и', 'м'],
 # ~ ['е', 'н', 'ь', 'ш', 'е', 'г', 'о', ' '],
 # ~ ['р', 'а', 'з', 'м', 'е', 'р', 'а', '.']]

# ~ Д а н   т е к с 
# ~ т .   З а п и с 
# ~ а т ь   е г о   
# ~ п о с т р о ч н 
# ~ о   в   к в а д 
# ~ р а т   н а и м 
# ~ е н ь ш е г о   
# ~ р а з м е р а .

# ------------------------------------------

# ~ текст: В Лос-Анджелесе продолжаются пожары, с которыми не справляются — ни фактически, ни политически. Огненная стихия уничтожает все на своем пути — от домов обычных людей до роскошных вилл голливудских звезд.
# ~ длина: 203
# ~ размер: 15

# ~ квадрат:

# ~ [['В', ' ', 'Л', 'о', 'с', '-', 'А', 'н', 'д', 'ж', 'е', 'л', 'е', 'с', 'е'],
 # ~ [' ', 'п', 'р', 'о', 'д', 'о', 'л', 'ж', 'а', 'ю', 'т', 'с', 'я', ' ', 'п'],
 # ~ ['о', 'ж', 'а', 'р', 'ы', ',', ' ', 'с', ' ', 'к', 'о', 'т', 'о', 'р', 'ы'],
 # ~ ['м', 'и', ' ', 'н', 'е', ' ', 'с', 'п', 'р', 'а', 'в', 'л', 'я', 'ю', 'т'],
 # ~ ['с', 'я', ' ', '—', ' ', 'н', 'и', ' ', 'ф', 'а', 'к', 'т', 'и', 'ч', 'е'],
 # ~ ['с', 'к', 'и', ',', ' ', 'н', 'и', ' ', 'п', 'о', 'л', 'и', 'т', 'и', 'ч'],
 # ~ ['е', 'с', 'к', 'и', '.', ' ', 'О', 'г', 'н', 'е', 'н', 'н', 'а', 'я', ' '],
 # ~ ['с', 'т', 'и', 'х', 'и', 'я', ' ', 'у', 'н', 'и', 'ч', 'т', 'о', 'ж', 'а'],
 # ~ ['е', 'т', ' ', 'в', 'с', 'е', ' ', 'н', 'а', ' ', 'с', 'в', 'о', 'е', 'м'],
 # ~ [' ', 'п', 'у', 'т', 'и', ' ', '—', ' ', 'о', 'т', ' ', 'д', 'о', 'м', 'о'],
 # ~ ['в', ' ', 'о', 'б', 'ы', 'ч', 'н', 'ы', 'х', ' ', 'л', 'ю', 'д', 'е', 'й'],
 # ~ [' ', 'д', 'о', ' ', 'р', 'о', 'с', 'к', 'о', 'ш', 'н', 'ы', 'х', ' ', 'в'],
 # ~ ['и', 'л', 'л', ' ', 'г', 'о', 'л', 'л', 'и', 'в', 'у', 'д', 'с', 'к', 'и'],
 # ~ ['х', ' ', 'з', 'в', 'е', 'з', 'д', '.', '', '', '', '', '', '', ''],
 # ~ ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '']]

# ~ В   Л о с - А н д ж е л е с е 
  # ~ п р о д о л ж а ю т с я   п 
# ~ о ж а р ы ,   с   к о т о р ы 
# ~ м и   н е   с п р а в л я ю т 
# ~ с я   —   н и   ф а к т и ч е 
# ~ с к и ,   н и   п о л и т и ч 
# ~ е с к и .   О г н е н н а я   
# ~ с т и х и я   у н и ч т о ж а 
# ~ е т   в с е   н а   с в о е м 
  # ~ п у т и   —   о т   д о м о 
# ~ в   о б ы ч н ы х   л ю д е й 
  # ~ д о   р о с к о ш н ы х   в 
# ~ и л л   г о л л и в у д с к и 
# ~ х   з в е з д .       

# ------------------------------------------

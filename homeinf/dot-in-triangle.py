#!/usr/bin/env python
# Mikhail (myke) Kolodin
# 2025-03-03 2025-03-03 1.1
# dot-in-triangle.py

# ~ Точка внутри треугольника
# ~ --------------------------------------

# ~ Даны координаты углов остроугольного треугольника и некой точки.
# ~ Проверить, находится ли точка внутри треугольника.

# ~ (Подсказка: сумма площадей с одной вершиной в данной точке и двумя из треугольника попарно
# ~ равна площади исходного треугольника)


from math import sqrt
from random import random

EPS = 1e-5

data = [
    ( (0., 0., 0., 5., 5., 0.), (1., 1.)),
    ( (0., 0., 0., 5., 5., 0.), (2., 2.)),
    ( (0., 0., 0., 5., 5., 0.), (3., 3.)),
    ( (0., 0., 0., 5., 5., 0.), (5., 5.)),
    ]


def calc_size(tri):
    """
    вычислить размер одного треугольника
    """

    a = length(tri[0], tri[1], tri[2], tri[3])
    b = length(tri[4], tri[5], tri[2], tri[3])
    c = length(tri[4], tri[5], tri[0], tri[1])

    p = (a + b + c) / 2

    s = sqrt( p * (p-a) * (p-b) * (p-c) )

    return s


def length(x1, y1, x2, y2):
    """
    вычислить длину стороны
    """

    size = sqrt( (x1-x2) ** 2 + (y1-y2) ** 2 )

    return size


def tester(tri, point):
    """
    проверить 1 треугольник и точку
    """

    sq0 = calc_size(tri)

    tri1 = tri[:4] + point
    sq1 = calc_size(tri1)

    tri2 = tri[:2] + tri[4:] + point
    sq2 = calc_size(tri2)

    tri3 = tri[2:] + point
    sq3 = calc_size(tri3)

    res = sq1 + sq2 + sq3 - sq0 <= EPS

    # ~ print(f"{tri=}")
    # ~ print(f"{tri1=}")
    # ~ print(f"{tri2=}")
    # ~ print(f"{tri3=}")
    # ~ print(f"{sq0=}, {sq1=}, {sq2=}, {sq3=}, {res=}")

    return res


def main():
    """
    запустить все тесты
    """

    for inum, test in enumerate(data, 1):
        tri, point = test
        print(f"test {inum}: {tri=}, {point=} => {tester(tri, point)}") 

main()


# ~ test 1: tri=(0.0, 0.0, 0.0, 5.0, 5.0, 0.0), point=(1.0, 1.0) => True
# ~ test 2: tri=(0.0, 0.0, 0.0, 5.0, 5.0, 0.0), point=(2.0, 2.0) => True
# ~ test 3: tri=(0.0, 0.0, 0.0, 5.0, 5.0, 0.0), point=(3.0, 3.0) => False
# ~ test 4: tri=(0.0, 0.0, 0.0, 5.0, 5.0, 0.0), point=(5.0, 5.0) => False


# ~ tri=(0.0, 0.0, 0.0, 5.0, 5.0, 0.0)
# ~ tri1=(0.0, 0.0, 0.0, 5.0, 1.0, 1.0)
# ~ tri2=(0.0, 0.0, 5.0, 0.0, 1.0, 1.0)
# ~ tri3=(0.0, 5.0, 5.0, 0.0, 1.0, 1.0)
# ~ sq0=12.5, sq1=2.5000000000000053, sq2=2.5000000000000053, sq3=7.500000000000008, res=True
# ~ test 1: tri=(0.0, 0.0, 0.0, 5.0, 5.0, 0.0), point=(1.0, 1.0) => True
# ~ tri=(0.0, 0.0, 0.0, 5.0, 5.0, 0.0)
# ~ tri1=(0.0, 0.0, 0.0, 5.0, 2.0, 2.0)
# ~ tri2=(0.0, 0.0, 5.0, 0.0, 2.0, 2.0)
# ~ tri3=(0.0, 5.0, 5.0, 0.0, 2.0, 2.0)
# ~ sq0=12.5, sq1=5.0, sq2=5.0, sq3=2.500000000000003, res=True
# ~ test 2: tri=(0.0, 0.0, 0.0, 5.0, 5.0, 0.0), point=(2.0, 2.0) => True
# ~ tri=(0.0, 0.0, 0.0, 5.0, 5.0, 0.0)
# ~ tri1=(0.0, 0.0, 0.0, 5.0, 3.0, 3.0)
# ~ tri2=(0.0, 0.0, 5.0, 0.0, 3.0, 3.0)
# ~ tri3=(0.0, 5.0, 5.0, 0.0, 3.0, 3.0)
# ~ sq0=12.5, sq1=7.5000000000000036, sq2=7.5000000000000036, sq3=2.500000000000003, res=False
# ~ test 3: tri=(0.0, 0.0, 0.0, 5.0, 5.0, 0.0), point=(3.0, 3.0) => False
# ~ tri=(0.0, 0.0, 0.0, 5.0, 5.0, 0.0)
# ~ tri1=(0.0, 0.0, 0.0, 5.0, 5.0, 5.0)
# ~ tri2=(0.0, 0.0, 5.0, 0.0, 5.0, 5.0)
# ~ tri3=(0.0, 5.0, 5.0, 0.0, 5.0, 5.0)
# ~ sq0=12.5, sq1=12.5, sq2=12.5, sq3=12.5, res=False
# ~ test 4: tri=(0.0, 0.0, 0.0, 5.0, 5.0, 0.0), point=(5.0, 5.0) => False


#!/usr/bin/env python

# Mikhail (myke) Kolodin, 2024
# 2024-12-28 2024-12-28 1.0
# hny2025.py

# ~ Показать поздравление "С Новым 2025 годом!" после раскодирования.
# ~ Но сначала нужно закодировать.

from math import isqrt
from pprint import pp

greet = """

 ***     *   *   ***   ****   *   *  *   *
*        *   *  *   *  *   *  *   *  ** **
*        *****  *   *  ****   **  *  * * *
*        *   *  *   *  *   *  * * *  *   *
 ***     *   *   ***   ****   *** *  *   *

*****  *****  *****  *****    *****   ***    ***    ***   *   *   *
    *  *   *      *  *        *   *  *   *   * *   *   *  ** **   *
*****  *   *  *****  *****    *      *   *   * *   *   *  * * *   *
*      *   *  *          *    *      *   *   * *   *   *  *   *
*****  *****  *****  *****    *       ***   *****   ***   *   *   *

"""

print(greet)

chars = [ [ ord(c)**2 for c in list(line) ] for line in greet.split("\n") ]

print(chars)

# ~ а теперь раскодировать! :)

regreet = "\n". join (
    [ "" . join ( [ chr(isqrt(i)) for i in line ] )
        for line in chars
    ]
    )

print(regreet)

# ~ А теперь по шагам! 

# ~ mass = [[], [], [1024, 1764, 1764, 1764, 1024, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1764, 1764, 1024, 1024, 1024, 1764, 1764, 1764, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764], [1764, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1764, 1024, 1764, 1764], [1764, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1764, 1764, 1764, 1764, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1764, 1764, 1764, 1024, 1024, 1024, 1764, 1764, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1764, 1024, 1764], [1764, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1764, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764], [1024, 1764, 1764, 1764, 1024, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1764, 1764, 1024, 1024, 1024, 1764, 1764, 1764, 1764, 1024, 1024, 1024, 1764, 1764, 1764, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764], [], [1764, 1764, 1764, 1764, 1764, 1024, 1024, 1764, 1764, 1764, 1764, 1764, 1024, 1024, 1764, 1764, 1764, 1764, 1764, 1024, 1024, 1764, 1764, 1764, 1764, 1764, 1024, 1024, 1024, 1024, 1764, 1764, 1764, 1764, 1764, 1024, 1024, 1024, 1764, 1764, 1764, 1024, 1024, 1024, 1024, 1764, 1764, 1764, 1024, 1024, 1024, 1024, 1764, 1764, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764], [1024, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1764, 1024, 1764, 1764, 1024, 1024, 1024, 1764], [1764, 1764, 1764, 1764, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1764, 1764, 1764, 1764, 1024, 1024, 1764, 1764, 1764, 1764, 1764, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1764, 1024, 1764, 1024, 1024, 1024, 1764], [1764, 1024, 1024, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764], [1764, 1764, 1764, 1764, 1764, 1024, 1024, 1764, 1764, 1764, 1764, 1764, 1024, 1024, 1764, 1764, 1764, 1764, 1764, 1024, 1024, 1764, 1764, 1764, 1764, 1764, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1764, 1764, 1764, 1024, 1024, 1024, 1764, 1764, 1764, 1764, 1764, 1024, 1024, 1024, 1764, 1764, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764], [], []]

mass = [[], [],
 [1024, 1764, 1764, 1764, 1024, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764,
  1024, 1024, 1024, 1764, 1764, 1764, 1024, 1024, 1024, 1764, 1764, 1764, 1764, 1024,
  1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764],
 [1764, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764,
  1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764,
  1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1764, 1024, 1764, 1764],
 [1764, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1764, 1764, 1764, 1764, 1764,
  1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1764, 1764, 1764, 1024,
  1024, 1024, 1764, 1764, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1764, 1024, 1764],
 [1764, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764,
  1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764,
  1024, 1024, 1764, 1024, 1764, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764],
 [1024, 1764, 1764, 1764, 1024, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764,
  1024, 1024, 1024, 1764, 1764, 1764, 1024, 1024, 1024, 1764, 1764, 1764, 1764, 1024,
  1024, 1024, 1764, 1764, 1764, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764],
 [],
 [1764, 1764, 1764, 1764, 1764, 1024, 1024, 1764, 1764, 1764, 1764, 1764, 1024, 1024,
  1764, 1764, 1764, 1764, 1764, 1024, 1024, 1764, 1764, 1764, 1764, 1764, 1024, 1024,
  1024, 1024, 1764, 1764, 1764, 1764, 1764, 1024, 1024, 1024, 1764, 1764, 1764, 1024,
  1024, 1024, 1024, 1764, 1764, 1764, 1024, 1024, 1024, 1024, 1764, 1764, 1764, 1024,
  1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764],
 [1024, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024,
  1024, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1024, 1024, 1024,
  1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764,
  1024, 1024, 1024, 1764, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764,
  1024, 1024, 1764, 1764, 1024, 1764, 1764, 1024, 1024, 1024, 1764],
 [1764, 1764, 1764, 1764, 1764, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024,
  1764, 1764, 1764, 1764, 1764, 1024, 1024, 1764, 1764, 1764, 1764, 1764, 1024, 1024,
  1024, 1024, 1764, 1024, 1024, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764,
  1024, 1024, 1024, 1764, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764,
  1024, 1024, 1764, 1024, 1764, 1024, 1764, 1024, 1024, 1024, 1764],
 [1764, 1024, 1024, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024,
  1764, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1764, 1024, 1024,
  1024, 1024, 1764, 1024, 1024, 1024, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764,
  1024, 1024, 1024, 1764, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764,
  1024, 1024, 1764, 1024, 1024, 1024, 1764],
 [1764, 1764, 1764, 1764, 1764, 1024, 1024, 1764, 1764, 1764, 1764, 1764, 1024, 1024,
  1764, 1764, 1764, 1764, 1764, 1024, 1024, 1764, 1764, 1764, 1764, 1764, 1024, 1024,
  1024, 1024, 1764, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1764, 1764, 1764, 1024,
  1024, 1024, 1764, 1764, 1764, 1764, 1764, 1024, 1024, 1024, 1764, 1764, 1764, 1024,
  1024, 1024, 1764, 1024, 1024, 1024, 1764, 1024, 1024, 1024, 1764],
 [], []]

print(f"{mass=}")
pp(mass, width=90, compact=True)

# ~ Здесть много чисел!
# ~ Это целые числа!

# ~ Кажется, тут все - квадраты!
# ~ Извлечём-ка корни! isqrt

deroot = [
    [ isqrt(i) for i in line ]
    for line in mass
    ]

print(f"{deroot=}")

# ~ Круто! Похоже на коды букв.
# ~ Заменим коды на буквы!

bukvy = [
    [ chr(i) for i in line ]
    for line in deroot
    ]

print(f"{bukvy=}")

# ~ Склеим буквы в строки!

stroki = [
    "" . join( [ c for c in line ] )
    for line in bukvy
    ]

print(f"{stroki=}")

# ~ Соберём строки в текст!

out = "\n" . join (stroki)

print(out)

# ~ Альтернатива:

better = "\n". join (
    [ "" . join ( [ chr(isqrt(i)) for i in line ] )
        for line in mass
    ]
    )

print(better)
